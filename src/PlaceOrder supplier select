import React, { useState, useRef } from 'react';
import {
  fetch_item_by_mn_imei,
  fetch_item_by_serial,
  fetch_item_by_barcode,
} from './Functions';

const PlaceOrder = () => {
  const [scannedCode, setScannedCode] = useState('');
  const [orderItems, setOrderItems] = useState([]);
  const inputRef = useRef();

  const handleScan = async () => {
    const code = scannedCode.trim();
    if (!code) return;

    let result = null;
    let items = null;

    try {
      result = await fetch_item_by_mn_imei(code);
      items = result?.items;

      if (!items) {
        result = await fetch_item_by_serial(code);
        items = result?.items;
      }

      const isBarcode = !items;

      // Handle barcode array
      if (!items) {
        result = await fetch_item_by_barcode(code);
        const barcodeItems = result?.items;

        if (!barcodeItems || !Array.isArray(barcodeItems) || barcodeItems.length === 0) {
          alert('This item does not exist in database.');
          return;
        }

        // Let user select the variant
        const list = barcodeItems
          .map((item, i) =>
            `${i + 1}) ${item.supplierName} - $${item.salePrice} (Qty: ${item.quantity})`
          )
          .join('\n');

        const indexStr = prompt(`Multiple matches found. Select supplier:\n${list}`, '1');
        const index = parseInt(indexStr) - 1;

        if (isNaN(index) || index < 0 || index >= barcodeItems.length) {
          alert('Invalid selection.');
          return;
        }

        const selectedItem = barcodeItems[index];

        const availableQty = selectedItem.quantity;
        const requestedQtyStr = prompt(
          `Available stock: ${availableQty}\nEnter quantity to add:`,
          '1'
        );

        const requestedQty = parseInt(requestedQtyStr);
        if (!requestedQty || isNaN(requestedQty) || requestedQty <= 0) {
          alert('Invalid quantity.');
          return;
        }

        // Check if same itemDetailsId already exists (same supplier/price)
        const existingItemIndex = orderItems.findIndex(
          (x) => x.itemDetailsId === selectedItem.itemDetailsId
        );

        const alreadyInOrderQty =
          existingItemIndex !== -1 ? orderItems[existingItemIndex].quantity : 0;

        const totalRequestedQty = requestedQty + alreadyInOrderQty;

        if (totalRequestedQty > availableQty) {
          alert(
            `Not enough stock. You already added ${alreadyInOrderQty}. Only ${availableQty} total in stock.`
          );
          return;
        }

        if (existingItemIndex !== -1) {
          // Update quantity
          const updatedItems = [...orderItems];
          updatedItems[existingItemIndex].quantity = totalRequestedQty;
          setOrderItems(updatedItems);
        } else {
          selectedItem.quantity = requestedQty;
          setOrderItems((prev) => [selectedItem, ...prev]);
        }

        setScannedCode('');
        return;
      }

      // IMEI/Serial item logic
      if (!items) {
        alert('This item does not exist in database.');
        return;
      }

      if (items.quantity <= 0) {
        alert(
          `Item "${items.itemName || items.modelNumber || 'Unnamed'}" is out of stock.`
        );
        return;
      }

      const exists = orderItems.some(
        (x) => x.itemDetailsId === items.itemDetailsId
      );
      if (exists) {
        const name =
          items.itemName ||
          items.modelNumber ||
          items.imei1 ||
          items.serialNumber ||
          items.barcode ||
          'unknown';
        alert(`Item "${name}" already added.`);
        return;
      }

      items.quantity = 1;
      setOrderItems((prev) => [items, ...prev]);
      setScannedCode('');
    } catch (err) {
      console.error('Error fetching item:', err);
      alert('Error fetching item. Please try again.');
    } finally {
      inputRef.current?.focus();
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter') handleScan();
  };

  const totalSalePrice = orderItems.reduce(
    (sum, item) => sum + item.salePrice * item.quantity,
    0
  );

  return (
    <div className="container">
      <h2 className="title">Place Order</h2>

      <div className="form-group">
        <label htmlFor="scanner">Scan Code (IMEI / Serial / Barcode):</label>
        <input
          id="scanner"
          type="text"
          value={scannedCode}
          onChange={(e) => setScannedCode(e.target.value)}
          onKeyDown={handleKeyDown}
          ref={inputRef}
          placeholder="Scan or enter item code"
          autoFocus
        />
        <button onClick={handleScan}>Add Item</button>
      </div>

      {orderItems.length > 0 && (
        <div className="added-items">
          <h3>Scanned Items</h3>
          <table>
            <thead>
              <tr>
                <th>Item Name</th>
                <th>Identifier</th>
                <th>Supplier</th>
                <th>Quantity</th>
                <th>Sale Price</th>
                <th>Cost</th>
              </tr>
            </thead>
            <tbody>
              {orderItems.map((items, i) => (
                <tr key={i}>
                  <td>{items.itemName || 'Unnamed'}</td>
                  <td>{items.imei1 || items.serialNumber || items.barcode || 'â€”'}</td>
                  <td>{items.supplierName}</td>
                  <td>{items.quantity}</td>
                  <td>${items.salePrice?.toFixed(2) ?? '0.00'}</td>
                  <td>${items.cost?.toFixed(2) ?? '0.00'}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className="total-summary" style={{ marginTop: '1rem', fontWeight: 'bold' }}>
            Total Sale Price: ${totalSalePrice.toFixed(2)}
          </div>
        </div>
      )}
    </div>
  );
};

export default PlaceOrder;
